{"version":3,"sources":["components/GridCube.jsx","components/Grid.jsx","components/Header.jsx","components/astar.js","App.js","reportWebVitals.js","index.js"],"names":["GridCube","props","useState","type","setType","useContext","CursorContext","cursorState","setCursorState","setSloc","SlocContext","setDloc","DlocContext","handleDragOver","event","target","style","backgroundColor","id","className","color","onDragOver","onClick","Grid","grid_list","i","l","j","push","toString","map","item","index","inner_item","inner_index","Header","sloc","dloc","textAlign","preventDefault","alert","document","getElementById","innerHTML","smallest","m","length","f","open","split","splice","k","astar","createContext","App","Provider","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ffaa8192.chunk.js","sourcesContent":["import React, { useContext, useState } from \"react\";\r\nimport { CursorContext, DlocContext, SlocContext } from \"../App\";\r\n\r\nexport default function GridCube(props){\r\n    const [type,setType] = useState(props.type);\r\n    const {cursorState, setCursorState} = useContext(CursorContext);\r\n    const {setSloc} = useContext(SlocContext); \r\n    const {setDloc} = useContext(DlocContext);\r\n    const handleDragOver = (event)=>{\r\n        if(type === \"source\" || type === \"destination\"){\r\n            return;\r\n        }\r\n        event.target.style.backgroundColor = \"black\";\r\n        setType(\"wall\");\r\n    }\r\n\r\n    const handleClick = (event)=>{\r\n        if(cursorState === \"source\"){\r\n            event.target.style.backgroundColor = \"green\";\r\n            setType(\"source\");\r\n            setSloc(event.target.id);\r\n            setCursorState(\"destination\");\r\n            return;\r\n        }\r\n        if(cursorState === \"destination\"){\r\n            event.target.style.backgroundColor = \"red\";\r\n            setType(\"destination\");\r\n            setDloc(event.target.id);\r\n            setCursorState(\"blank\");\r\n            return;\r\n        }\r\n        handleDragOver(event);\r\n    }\r\n\r\n\r\n    // eslint-disable-next-line no-useless-concat\r\n    return <div \r\n            id = {props.id} \r\n            type={type} \r\n            className={\"gridCube \"+props.color} \r\n            onDragOver={handleDragOver} \r\n            onClick={handleClick}\r\n        />\r\n}","import React from \"react\";\r\nimport GridCube from \"./GridCube\";\r\n\r\nexport default function Grid(){\r\n\r\n    const grid_list = [];\r\n    for (let i = 0; i < 20; i++) {\r\n        let l = [];\r\n        for (let j = 0; j < 40; j++) {\r\n            let color = \"white\";\r\n            let type = \"blank\";\r\n            l.push({\r\n                id: i.toString()+\" \"+j.toString(),\r\n                color: color,\r\n                type: type\r\n            });\r\n        }\r\n        grid_list.push(l);\r\n    }\r\n\r\n\r\n    return <div className=\"grid\">\r\n        {grid_list.map((item, index)=>{\r\n            return <div className=\"gridOut\" key={index}>\r\n                {item.map((inner_item, inner_index)=>{\r\n                \r\n                    return <GridCube\r\n                        id = {inner_item.id.toString()} \r\n                        key={inner_index} \r\n                        color={inner_item.color} \r\n                        type={inner_item.type}\r\n                    />\r\n                })}\r\n                </div>\r\n        })}\r\n    </div>\r\n}","import React, { useContext } from 'react';\r\nimport { CursorContext, DlocContext, SlocContext } from '../App';\r\nimport astar from './astar';\r\nexport default function Header(){\r\n\r\n    const {cursorState, setCursorState} = useContext(CursorContext);\r\n    const {sloc} = useContext(SlocContext);\r\n    const {dloc} = useContext(DlocContext);\r\n    const handleFind = (event)=>{\r\n        event.preventDefault();\r\n        if(cursorState === \"source\" || cursorState === \"destination\"){\r\n            alert(\"Set both source and destination\")\r\n        }\r\n        else{\r\n            document.getElementById(\"res\").innerHTML = astar(sloc, dloc);\r\n        }\r\n    }\r\n\r\n    const handleReset = (event)=>{\r\n        event.preventDefault();\r\n        for(let i = 0; i < 20; i++){\r\n            for(let j = 0; j < 40; j++){\r\n                document.getElementById(i.toString()+\" \"+j.toString()).style.backgroundColor = \"white\";\r\n            }\r\n        }\r\n        setCursorState(\"source\");\r\n        document.getElementById(\"res\").innerHTML = \"\";\r\n    }\r\n\r\n    return <div style={{textAlign:\"center\"}}>\r\n        <br/>\r\n        <button onClick={handleFind}>Find Path</button>\r\n        <button onClick={handleReset}>Reset</button>\r\n        <p id=\"res\"></p>\r\n    </div>\r\n}","\r\nexport default function astar(sloc, dloc){\r\n\r\n    function smallest(l) {\r\n        let m = 2000;\r\n        let id = -1;\r\n        for(let i = 0; i<l.length; i++){\r\n            if(l[i].f <= m){\r\n                m = l[i].f;\r\n                id = i;\r\n            }\r\n        }\r\n        return id;\r\n       }\r\n\r\n    var open = [{f: 0,id: sloc.split(\" \")},{f:2, id: [0,1]}];\r\n    while(open.length !== 0){\r\n        var id = smallest(open);\r\n        var q = open[id];\r\n        open.splice(id, 1);\r\n        var dx = [0,0,1,1,1,-1,-1,-1];\r\n        var dy = [1,-1,0,1,-1,0,1,-1];\r\n\r\n        for(let k = 0; k<8; k++){\r\n            \r\n        }\r\n    }\r\n    return sloc;\r\n}","import React, { createContext, useState } from \"react\";\nimport Grid from \"./components/Grid\";\nimport Header from \"./components/Header\";\n\nexport let CursorContext = createContext();\nexport let SlocContext = createContext();\nexport let DlocContext = createContext();\nfunction App() {\n\n  const [cursorState, setCursorState] = useState(\"source\");\n  const [sloc,setSloc] = useState(\"\");\n  const [dloc, setDloc] = useState(\"\");\n  return (\n    <CursorContext.Provider value = {{cursorState, setCursorState}}>\n    <SlocContext.Provider value = {{sloc, setSloc}}>\n    <DlocContext.Provider value = {{dloc, setDloc}}>\n    <div className=\"App\">\n      <Header />\n      <Grid />\n    </div>\n    </DlocContext.Provider>\n    </SlocContext.Provider>\n    </CursorContext.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./styles.css\";\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}